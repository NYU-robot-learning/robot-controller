# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import home_robot.utils.task_rpc_env_pb2 as task__rpc__env__pb2


class AgentgRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rpc_act_on_observations = channel.unary_unary(
            "/task_rpc_env.AgentgRPC/rpc_act_on_observations",
            request_serializer=task__rpc__env__pb2.ActOnObservationsArgs.SerializeToString,
            response_deserializer=task__rpc__env__pb2.ActOnObservationsReturns.FromString,
        )
        self.stream_act_on_observations = channel.stream_unary(
            "/task_rpc_env.AgentgRPC/stream_act_on_observations",
            request_serializer=task__rpc__env__pb2.ActOnObservationsArgs.SerializeToString,
            response_deserializer=task__rpc__env__pb2.ActOnObservationsReturns.FromString,
        )


class AgentgRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def rpc_act_on_observations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def stream_act_on_observations(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AgentgRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "rpc_act_on_observations": grpc.unary_unary_rpc_method_handler(
            servicer.rpc_act_on_observations,
            request_deserializer=task__rpc__env__pb2.ActOnObservationsArgs.FromString,
            response_serializer=task__rpc__env__pb2.ActOnObservationsReturns.SerializeToString,
        ),
        "stream_act_on_observations": grpc.stream_unary_rpc_method_handler(
            servicer.stream_act_on_observations,
            request_deserializer=task__rpc__env__pb2.ActOnObservationsArgs.FromString,
            response_serializer=task__rpc__env__pb2.ActOnObservationsReturns.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "task_rpc_env.AgentgRPC", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AgentgRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def rpc_act_on_observations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/task_rpc_env.AgentgRPC/rpc_act_on_observations",
            task__rpc__env__pb2.ActOnObservationsArgs.SerializeToString,
            task__rpc__env__pb2.ActOnObservationsReturns.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def stream_act_on_observations(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/task_rpc_env.AgentgRPC/stream_act_on_observations",
            task__rpc__env__pb2.ActOnObservationsArgs.SerializeToString,
            task__rpc__env__pb2.ActOnObservationsReturns.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class TaskgRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rpc_next_episode = channel.unary_unary(
            "/task_rpc_env.TaskgRPC/rpc_next_episode",
            request_serializer=task__rpc__env__pb2.NextEpisodeArgs.SerializeToString,
            response_deserializer=task__rpc__env__pb2.NextEpisodeReturns.FromString,
        )
        self.rpc_step = channel.unary_unary(
            "/task_rpc_env.TaskgRPC/rpc_step",
            request_serializer=task__rpc__env__pb2.StepArgs.SerializeToString,
            response_deserializer=task__rpc__env__pb2.StepReturns.FromString,
        )


class TaskgRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def rpc_next_episode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def rpc_step(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TaskgRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "rpc_next_episode": grpc.unary_unary_rpc_method_handler(
            servicer.rpc_next_episode,
            request_deserializer=task__rpc__env__pb2.NextEpisodeArgs.FromString,
            response_serializer=task__rpc__env__pb2.NextEpisodeReturns.SerializeToString,
        ),
        "rpc_step": grpc.unary_unary_rpc_method_handler(
            servicer.rpc_step,
            request_deserializer=task__rpc__env__pb2.StepArgs.FromString,
            response_serializer=task__rpc__env__pb2.StepReturns.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "task_rpc_env.TaskgRPC", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class TaskgRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def rpc_next_episode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/task_rpc_env.TaskgRPC/rpc_next_episode",
            task__rpc__env__pb2.NextEpisodeArgs.SerializeToString,
            task__rpc__env__pb2.NextEpisodeReturns.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def rpc_step(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/task_rpc_env.TaskgRPC/rpc_step",
            task__rpc__env__pb2.StepArgs.SerializeToString,
            task__rpc__env__pb2.StepReturns.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
